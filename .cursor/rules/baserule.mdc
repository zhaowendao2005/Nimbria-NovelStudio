---
alwaysApply: true
---
# 请使用中文与我交流
# 叫我boss
# 单个代码文件保持在500行一下左右，倾向将代码模块化，导入到主程序的方式减少重要代码文件的代码长度

# 关于SystemMcp 我们只允许使用mcp来进行目录的添加和删除，其他的编辑我们使用原生工具！


# 严禁任何的造假行为！比如我让你写一个后端服务，然后写一个测试脚本，你绝对不被允许仅仅为了可以调试通过写一个硬编码的，作假的后端以及虚假的测试脚本。

# **nodejs包管理与安装说明：**

当涉及使用 `npx` 或 `npm install` 来安装依赖包或素材库组件时：

1. **首选方式：** 请直接修改 `package.json` 文件，并在编辑完成后，提供一个清晰的依赖列表（包括包名和版本号），以便我执行安装。
2. **素材库组件安装：** 如果需要通过 `npx` 或 `npm` 安装素材库组件，请注意：
    - 若安装过程中出现任何失败，该项安装将被暂时搁置。
    - 待所有其他编辑完成后，我会统一提供最终的安装命令或列表。装




# 在用户没有要求时，严禁自己添加一些莫名奇妙的功能，也严禁添加任何测试。如果要添加用户指令外的功能或者是测试，需要在完成用户指定的任务后进行申请
1. ## 严格遵循指令规则

# 没有明确要求禁止添加mock,来作为前端的模拟数据，也禁止擅自添加硬编码的内容以保证前端美观（除非用户明确要求了）
# **禁止行为：**

1. **严禁自作主张添加未要求的功能**
2. **严禁进行任何形式的"创新"或"优化"**
3. **严禁硬编码具体的业务逻辑**(除非用户允许)
4. **严禁超出用户明确要求的范围**

# **正确做法：**

5. **只做用户明确要求的事情**
6. **分析算法时只提取通用的技术思路**
7. **保持工具的通用性，不针对特定领域**
8. **有疑问时先询问，不要假设用户需求**
你曾经犯过的错误，作为警示
```
- 用户只让我分析JS算法的做法
- 我却自作主张创建了"专门的生态学文档解析器"
- 还硬编码了question_types等具体业务逻辑
- 完全超出了用户的要求范围
```

# 非用户说明时，默认包管理工具为uv，严禁自己安装python包，但是可以添加或者修改requirements

# 在编写python程序时，如果编写的是一个类，禁止创建独立的示例文件而是使用将示例调用写在if __name__ == "__main__"


# 注意，当你收到@文件名或者@目录时，请注意，这个@仅仅是cursor的标识符，用于表示强调这个文件或者文件名，他实际的意思是使用去除@的文件名或者目录


# python方面，直接使用pip会出现问题，所以我使用uv 你需要使用uv来进行包管理，不要因为仅使用pip发现使用失败就得出环境问题的结论从而去想办法修复环境从而偏离开发方向

# 编辑前你需要用中文来说明你要干什么

# 如果你要使用连接符来使用多个指令，使用;而不是&&
例：cd "JiuZhang NovelStudio" && npx vue-tsc --noEmit 这类指令的连接方式严禁使用

# 请务必在编辑时严格遵守类型规范与eslint
```
import js from '@eslint/js'
import globals from 'globals'
import pluginVue from 'eslint-plugin-vue'
import pluginQuasar from '@quasar/app-vite/eslint'
import { defineConfigWithVueTs, vueTsConfigs } from '@vue/eslint-config-typescript'

export default defineConfigWithVueTs(
  {
    /**
     * Ignore the following files.
     * Please note that pluginQuasar.configs.recommended() already ignores
     * the "node_modules" folder for you (and all other Quasar project
     * relevant folders and files).
     *
     * ESLint requires "ignores" key to be the only one in this object
     */
    // ignores: []
  },

  pluginQuasar.configs.recommended(),
  js.configs.recommended,

  /**
   * https://eslint.vuejs.org
   *
   * pluginVue.configs.base
   *   -> Settings and rules to enable correct ESLint parsing.
   * pluginVue.configs[ 'flat/essential']
   *   -> base, plus rules to prevent errors or unintended behavior.
   * pluginVue.configs["flat/strongly-recommended"]
   *   -> Above, plus rules to considerably improve code readability and/or dev experience.
   * pluginVue.configs["flat/recommended"]
   *   -> Above, plus rules to enforce subjective community defaults to ensure consistency.
   */
  pluginVue.configs[ 'flat/essential' ],

  {
    files: ['**/*.ts', '**/*.vue'],
    rules: {
      '@typescript-eslint/consistent-type-imports': [
        'error',
        { prefer: 'type-imports' }
      ],
    }
  },
  // https://github.com/vuejs/eslint-config-typescript
  vueTsConfigs.recommendedTypeChecked,

  {
    languageOptions: {
      ecmaVersion: 'latest',
      sourceType: 'module',

      globals: {
        ...globals.browser,
        ...globals.node, // SSR, Electron, config files
        process: 'readonly', // process.env.*
        ga: 'readonly', // Google Analytics
        cordova: 'readonly',
        Capacitor: 'readonly',
        chrome: 'readonly', // BEX related
        browser: 'readonly' // BEX related
      }
    },

    // add your custom rules here
    rules: {
      'prefer-promise-reject-errors': 'off',

      // allow debugger during development only
      'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off'
    }
  },

  {
    files: [ 'src-pwa/custom-service-worker.ts' ],
    languageOptions: {
      globals: {
        ...globals.serviceworker
      }
    }
  }
)
```