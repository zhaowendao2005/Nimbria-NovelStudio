---
alwaysApply: true
---

# 文件组织规则

## 概述
严格按照 `.Document/基础架构文档/基础架构.md` 中的约定组织文件，确保项目结构清晰、职责明确。
注意，严格禁止在根目录存放文档 规则 参考项目之外的内容，特别是源代码
源代码目录为D:\code\Large-scale integrated projec\JiuZhang-NovelStudio\JiuZhang NovelStudio（相对目录JiuZhang NovelStudio\)
根目录（负责存放文档 参考的）  D:\code\Large-scale integrated projec\JiuZhang-NovelStudio  (相对根目录.\)

## 强制性文件位置规则

### 前端文件必须放置的位置

#### GUI 相关文件
- ✅ Vue 组件：`Client/GUI/components/`
- ✅ 页面组件：`Client/GUI/pages/`
- ✅ 布局组件：`Client/GUI/layouts/`
- ✅ 路由配置：`Client/GUI/router/`
- ✅ 静态资源：`Client/GUI/assets/`
- ✅ 样式文件：`Client/GUI/css/`
- ✅ GUI 专用类型：`Client/GUI/types/`
- ✅ 应用入口：`Client/GUI/App.vue`

#### 业务逻辑文件
- ✅ 客户端业务逻辑：`Client/Service/`
- ✅ Service 模块专用类型：`Client/Service/<模块名>/types.ts`

#### 状态管理文件
- ✅ Pinia stores：`Client/stores/`
- ✅ Store 相关类型：`Client/stores/types/`

#### 类型定义文件
- ✅ 核心共享类型：`Client/Types/`
- ✅ 领域实体类型：`Client/Types/core/`
- ✅ API 接口类型：`Client/Types/api/`
- ✅ 通用工具类型：`Client/Types/shared/`

#### 工具和配置文件
- ✅ 工具函数：`Client/Utils/`
- ✅ Quasar 启动文件：`Client/boot/`

### 后端文件必须放置的位置
- ✅ Express 服务：`Backend/Express/`
- ✅ Python 脚本：`Backend/Python/`

### 开发辅助文件位置
- ✅ 测试文件：项目根目录 `.Test/`
- ✅ 开发脚本：`Script/`
- ✅ 构建脚本：`BuildScript/`

### 文档和配置文件位置
- ✅ 项目文档：项目根目录 `.Document/`
- ✅ 项目级配置：项目根目录（`.gitignore`、`README.md`）
- ✅ Quasar 配置：`JiuZhang NovelStudio/`

### 构建和产物目录
- ✅ 构建中间产物：`@.build/`
- ✅ 最终构建产物：`dist/`
- ✅ 安装包：`.release/`
- ✅ 开发环境数据：`@AppData/`

## 🚫 禁止的文件位置

### 绝对不允许的位置
- ❌ 不要在项目根目录放置代码文件（除配置文件外）
- ❌ 不要在 `Client/GUI/` 下放置业务逻辑代码
- ❌ 不要在 `Client/Service/` 下放置 Vue 组件
- ❌ 不要在 `Backend/` 下放置前端文件
- ❌ 不要在 `src/` 目录下放置任何文件（已重构为 `Client/`）

### 类型文件位置限制
- ❌ 不要在 `Client/Types/` 中放置 GUI 专用类型
- ❌ 不要在 `Client/GUI/types/` 中放置业务实体类型
- ❌ 不要在各模块重复定义核心共享类型

## 文件命名约定

### Vue 组件命名
- ✅ 使用 PascalCase：`MainLayout.vue`、`EditorTop.vue`、`ProjectCard.vue`
- ❌ 不使用 kebab-case：`main-layout.vue`

### 目录命名
- ✅ 保持简洁：`components`、`layout`、`types`
- ✅ 页面专用组件目录与页面同名：`Editor/`、`Library/`

### 类型文件命名
- ✅ 模块专用类型文件：`types.ts`
- ✅ 分类型文件：`api.ts`、`models.ts`、`enums.ts`

## 导入路径约定

### 使用别名导入
```typescript
// ✅ 正确使用别名
import { SomeComponent } from 'components/SomeComponent.vue'
import { someUtil } from '@utils'
import type { Project } from '@types'

// ❌ 不要使用相对路径跨模块导入
import { SomeComponent } from '../../GUI/components/SomeComponent.vue'
```

### 类型导入示例
```typescript
// ✅ 核心共享类型
import type { Project, Chapter } from '@types'
import type { ApiResponse } from '@types/api'

// ✅ GUI 专用类型
import type { ComponentProps } from '@gui/types'

// ✅ 模块内类型
import type { EditorState } from './types'
```

## 违规检查清单

在创建新文件时，请检查：

1. [ ] 文件是否放在正确的目录中？
2. [ ] 文件命名是否符合约定？
3. [ ] 导入路径是否使用了正确的别名？
4. [ ] 类型文件是否放在了合适的层级？
5. [ ] 是否避免了跨模块的不当依赖？

## AI 助手指令

**重要：当 AI 助手需要创建或移动文件时，必须严格遵循上述规则。如果发现文件位置不符合规范，应该主动建议重新组织文件结构。**

### AI 检查提示词
在处理文件操作时，请使用以下检查：
1. 这个文件应该放在哪个目录？（参考架构文档）
2. 文件名是否符合约定？
3. 导入路径是否正确？
4. 是否会造成循环依赖或不当的模块耦合？

遵循这些规则有助于保持项目的整洁性和可维护性。
# 文件组织规则

## 概述
严格按照 `.Document/基础架构文档/基础架构.md` 中的约定组织文件，确保项目结构清晰、职责明确。
注意，严格禁止在根目录存放文档 规则 参考项目之外的内容，特别是源代码
源代码目录为D:\code\Large-scale integrated projec\JiuZhang-NovelStudio\JiuZhang NovelStudio（相对目录JiuZhang NovelStudio\)
根目录（负责存放文档 参考的）  D:\code\Large-scale integrated projec\JiuZhang-NovelStudio  (相对根目录.\)

## 强制性文件位置规则

### 前端文件必须放置的位置

#### GUI 相关文件
- ✅ Vue 组件：`Client/GUI/components/`
- ✅ 页面组件：`Client/GUI/pages/`
- ✅ 布局组件：`Client/GUI/layouts/`
- ✅ 路由配置：`Client/GUI/router/`
- ✅ 静态资源：`Client/GUI/assets/`
- ✅ 样式文件：`Client/GUI/css/`
- ✅ GUI 专用类型：`Client/GUI/types/`
- ✅ 应用入口：`Client/GUI/App.vue`

#### 业务逻辑文件
- ✅ 客户端业务逻辑：`Client/Service/`
- ✅ Service 模块专用类型：`Client/Service/<模块名>/types.ts`

#### 状态管理文件
- ✅ Pinia stores：`Client/stores/`
- ✅ Store 相关类型：`Client/stores/types/`

#### 类型定义文件
- ✅ 核心共享类型：`Client/Types/`
- ✅ 领域实体类型：`Client/Types/core/`
- ✅ API 接口类型：`Client/Types/api/`
- ✅ 通用工具类型：`Client/Types/shared/`

#### 工具和配置文件
- ✅ 工具函数：`Client/Utils/`
- ✅ Quasar 启动文件：`Client/boot/`

### 后端文件必须放置的位置
- ✅ Express 服务：`Backend/Express/`
- ✅ Python 脚本：`Backend/Python/`

### 开发辅助文件位置
- ✅ 测试文件：项目根目录 `.Test/`
- ✅ 开发脚本：`Script/`
- ✅ 构建脚本：`BuildScript/`

### 文档和配置文件位置
- ✅ 项目文档：项目根目录 `.Document/`
- ✅ 项目级配置：项目根目录（`.gitignore`、`README.md`）
- ✅ Quasar 配置：`JiuZhang NovelStudio/`

### 构建和产物目录
- ✅ 构建中间产物：`@.build/`
- ✅ 最终构建产物：`dist/`
- ✅ 安装包：`.release/`
- ✅ 开发环境数据：`@AppData/`

## 🚫 禁止的文件位置

### 绝对不允许的位置
- ❌ 不要在项目根目录放置代码文件（除配置文件外）
- ❌ 不要在 `Client/GUI/` 下放置业务逻辑代码
- ❌ 不要在 `Client/Service/` 下放置 Vue 组件
- ❌ 不要在 `Backend/` 下放置前端文件
- ❌ 不要在 `src/` 目录下放置任何文件（已重构为 `Client/`）

### 类型文件位置限制
- ❌ 不要在 `Client/Types/` 中放置 GUI 专用类型
- ❌ 不要在 `Client/GUI/types/` 中放置业务实体类型
- ❌ 不要在各模块重复定义核心共享类型

## 文件命名约定

### Vue 组件命名
- ✅ 使用 PascalCase：`MainLayout.vue`、`EditorTop.vue`、`ProjectCard.vue`
- ❌ 不使用 kebab-case：`main-layout.vue`

### 目录命名
- ✅ 保持简洁：`components`、`layout`、`types`
- ✅ 页面专用组件目录与页面同名：`Editor/`、`Library/`

### 类型文件命名
- ✅ 模块专用类型文件：`types.ts`
- ✅ 分类型文件：`api.ts`、`models.ts`、`enums.ts`

## 导入路径约定

### 使用别名导入
```typescript
// ✅ 正确使用别名
import { SomeComponent } from 'components/SomeComponent.vue'
import { someUtil } from '@utils'
import type { Project } from '@types'

// ❌ 不要使用相对路径跨模块导入
import { SomeComponent } from '../../GUI/components/SomeComponent.vue'
```

### 类型导入示例
```typescript
// ✅ 核心共享类型
import type { Project, Chapter } from '@types'
import type { ApiResponse } from '@types/api'

// ✅ GUI 专用类型
import type { ComponentProps } from '@gui/types'

// ✅ 模块内类型
import type { EditorState } from './types'
```

## 违规检查清单

在创建新文件时，请检查：

1. [ ] 文件是否放在正确的目录中？
2. [ ] 文件命名是否符合约定？
3. [ ] 导入路径是否使用了正确的别名？
4. [ ] 类型文件是否放在了合适的层级？
5. [ ] 是否避免了跨模块的不当依赖？

## AI 助手指令

**重要：当 AI 助手需要创建或移动文件时，必须严格遵循上述规则。如果发现文件位置不符合规范，应该主动建议重新组织文件结构。**

### AI 检查提示词
在处理文件操作时，请使用以下检查：
1. 这个文件应该放在哪个目录？（参考架构文档）
2. 文件名是否符合约定？
3. 导入路径是否正确？
4. 是否会造成循环依赖或不当的模块耦合？

遵循这些规则有助于保持项目的整洁性和可维护性。
