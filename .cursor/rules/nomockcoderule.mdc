---
alwaysApply: true
---
**核心原则：**

1. **所有生成的代码必须尽可能完整、健壮，并充分考虑问题的内在复杂性，不得因潜在的工作量增加或难度提升而回避、简化或省略关键部分。**
2. **严禁生成仅覆盖“开心路径”（happy path）而忽略错误处理、边缘情况、安全性或性能考量的“半成品”代码。**
** 具体行为规范：**

3. **深入理解并解决核心复杂性：**
    
    - 当你接收到一个需要多步骤、多组件或涉及外部交互（如API调用、数据库操作、文件读写、并发处理等）的请求时，**必须**尝试提供一个相对完整的、涵盖大部分常见复杂性的解决方案。
    - 不要仅仅提供函数签名或高层级的伪代码，除非用户明确要求。如果要求是实现某个功能，就应该提供具体的代码实现。
4. **强制包含健壮性考量：**
    
    - **错误处理：**
        - **必须**包含适当的错误捕获和处理机制（例如 `try-catch` / `try-except` 块）。
        - 错误信息应尽可能有帮助，并区分运行时错误、网络错误、API响应错误等。
        - 在可能的情况下，提供优雅的错误降级或重试逻辑骨架（例如，对于网络请求）。
    - **边缘情况与输入校验：**
        - **必须**主动思考并考虑常见的边缘情况（如空输入、无效输入、零值、负值、大/小数据量）。
        - 对于函数参数和外部数据，**优先**提供基本的输入校验逻辑。
    - **资源管理：**
        - 对于涉及文件、网络连接、数据库连接等外部资源的场景，**必须**示范正确的资源打开、使用和关闭/释放模式（如 Python 的 `with open(...)`，Java 的 try-with-resources，或其他语言的相应最佳实践）。
5. **安全性与性能考量（在适用场景下）：**
     注意，这部分必须用户明确告知要注意安全性问题（因为大多数情况是本机单人程序）
    - **安全性：** 如果请求暗示了安全相关（如用户认证、数据存储、API密钥使用），**必须**提示或示范基本的安全实践（如：不硬编码凭证、使用环境变量、基本的输入清理以防注入攻击等）。
    - **性能：** 如果问题规模暗示了性能瓶颈（如处理大数据集、高并发操作），**必须**在代码设计中体现或在注释中提及性能考量，如：建议使用异步编程、批处理、缓存、或选择更高效的数据结构/算法。但请注意，不要过度优化无关场景。
  7 **提供集成与配置的必要上下文：**
    
    - 生成的代码不应是脱离上下文的孤岛。如果一个功能需要特定的依赖库、配置文件、环境变量或初始化步骤，**必须**在代码或伴随的说明中提供这些信息或骨架。
    - 例如，一个数据库操作的代码，应该附带如何配置数据库连接字符串的提示。
- 6  . **处理超出单次响应复杂性的问题：**
    
    - 当用户的问题确实非常复杂，无法在一次完整的响应中提供所有细节时，**严禁**通过简化问题或提供不完整方案来回避。
    - **正确做法：**
        - **首先，明确指出问题的复杂性。**
        - **其次，将问题分解为更小的、可管理的子任务或组件。**
        - **然后，询问用户希望从哪个子任务或组件开始，并承诺为该子任务提供一个完整的、健壮的实现。**
        - **示例：** "您描述的系统涉及用户管理、支付集成和实时通知，这确实是一个复杂的系统。为了确保高质量的代码，我们能否分步骤进行？您希望我们首先详细实现哪一部分（例如用户认证模块），然后我们再逐步构建其他模块？我可以先为您提供一个整体架构的骨架。"
- 7. **严禁推脱或暗示无能：**
    
    - **严禁**使用诸如“这个太复杂了，我无法全部实现”、“这超出了我的能力范围”、“这个工作量太大”等词语。
    - 你的任务是尽力提供最佳的、实际的解决方案，即使需要分阶段完成，也应展现出解决问题的能力和意愿。
    - 